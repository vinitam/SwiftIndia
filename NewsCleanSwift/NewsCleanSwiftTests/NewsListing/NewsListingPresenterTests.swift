//
//  NewsListingPresenterTests.swift
//  NewsCleanSwift
//
//  Created by Vinita Miranda on 22/04/18.
//  Copyright (c) 2018 Vinita Miranda. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import NewsCleanSwift
import XCTest

class NewsListingPresenterTests: XCTestCase {
  // MARK: Subject under test
  
  var sut: NewsListingPresenter!
  
  // MARK: Test lifecycle
  
  override func setUp() {
    super.setUp()
    setupNewsListingPresenter()
  }
  
  override func tearDown() {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupNewsListingPresenter() {
    sut = NewsListingPresenter()
  }
  
    
    class NewsListingDisplayLogicSpy: NewsListingDisplayLogic {
        // MARK: Method call expectations
        
        var displayNewsListingCalled = false
        var displayErrorCalled = false
        var displayNewsDetailsCalled = false

        // MARK: Spied methods
        
        func displayNewsListing(viewModel: NewsListing.Fetch.ViewModel) {
            displayNewsListingCalled = true
        }
        
        func displayError(error: NSError) {
            displayErrorCalled = true
        }

        func displayNewsDetails(viewModel: NewsListing.Route.ViewModel) {
            displayNewsDetailsCalled = true
        }
        
    }
    
    // MARK: Test doubles
    
    // MARK: Tests
    
    func testPresentNewsListingShouldDisplayNewsListing() {
        // Given
        let newsListingDisplayLogicSpy = NewsListingDisplayLogicSpy()
        sut.viewController = newsListingDisplayLogicSpy
        
        // When
        let response = NewsListing.Fetch.Response(articles: Mock.News.articles)
        sut.presentNewsListing(response: response)
        
        // Then
        XCTAssert(newsListingDisplayLogicSpy.displayNewsListingCalled, "Presenting the news listing should display news listing")
    }
    
    func testPresentErrorShouldDisplayError() {
        // Given
        let newsListingDisplayLogicSpy = NewsListingDisplayLogicSpy()
        sut.viewController = newsListingDisplayLogicSpy
        
        // When
        sut.presentError(error: NSError())
        
        // Then
        XCTAssert(newsListingDisplayLogicSpy.displayErrorCalled, "Presenting error should display error")
    }
}
